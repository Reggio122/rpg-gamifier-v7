# v15 Clean Backend: Flask + Telegram Bot + Assistant + Smart Reminders
import os, json, time, threading
from datetime import datetime, timedelta, timezone
from flask import Flask, request, jsonify
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import ApplicationBuilder, CommandHandler
from telegram.constants import ParseMode

TOKEN = os.getenv('BOT_TOKEN', 'YOUR_TELEGRAM_BOT_TOKEN')
MINIAPP_URL = os.getenv('MINIAPP_URL', 'https://example.com')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')

USE_GPT = bool(OPENAI_API_KEY)
if USE_GPT:
    try:
        import openai
        openai.api_key = OPENAI_API_KEY
    except Exception:
        USE_GPT = False

DATA = {"reminders": []}  # in-memory for simplicity

app = Flask(__name__)
bot = Bot(TOKEN)

@app.get('/health')
def health(): return 'ok', 200

@app.post('/assistant')
def assistant():
    body = request.get_json(silent=True) or {}
    mode = body.get('mode','breakdown'); text = body.get('text','')
    if USE_GPT:
        try:
            prompt = {
                "breakdown": f"–†–∞–∑–±–µ–π —Ü–µ–ª—å –Ω–∞ 5-7 –∫–æ—Ä–æ—Ç–∫–∏—Ö —à–∞–≥–æ–≤. –¶–µ–ª—å: {text}. –°–ø–∏—Å–æ–∫ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤.",
                "week": f"–°—Ñ–æ—Ä–º–∏—Ä—É–π –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é (5-7 –ø—É–Ω–∫—Ç–æ–≤) –¥–ª—è —Ü–µ–ª–∏: {text}. –°–ø–∏—Å–æ–∫ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤.",
                "motivate": f"–î–∞–π 5-7 –∫–æ—Ä–æ—Ç–∫–∏—Ö –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ RPG‚Äë—Å—Ç–∏–ª–µ, —É—á–∏—Ç—ã–≤–∞—è —Ü–µ–ª—å: {text}. –°–ø–∏—Å–æ–∫ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤."
            }[mode]
            resp = openai.chat.completions.create(model="gpt-4o-mini",
                messages=[{"role":"user","content": prompt}], max_tokens=300, temperature=0.7)
            out = resp.choices[0].message.content
            items = [s.strip('-‚Ä¢ ').strip() for s in out.split('\n') if s.strip()][:7]
            return jsonify({"items": items})
        except Exception:
            pass
    # fallback
    defaults = {
        "breakdown": ["–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–ª–∞–Ω","–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥","–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω","–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ","–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"],
        "week": ["–ü–Ω: 200 —Å–ª–æ–≤","–í—Ç: 15 –º–∏–Ω —á—Ç–µ–Ω–∏—è","–°—Ä: –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å","–ß—Ç: –º–æ–Ω—Ç–∞–∂","–ü—Ç: –ø—É–±–ª–∏–∫–∞—Ü–∏—è","–í—Å: –æ–±–∑–æ—Ä"],
        "motivate": ["–ù–∞—á–Ω–∏ —Å –º–∞–ª–æ–≥–æ","–°–¥–µ–ª–∞–π 1% –ø—Ä–æ–≥—Ä–µ—Å—Å","–†–∞–¥–∏ —Å–µ–±—è –±—É–¥—É—â–µ–≥–æ","–ì–µ—Ä–æ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–≤–µ—Å—Ç—ã","–¢—ã –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ"]
    }
    return jsonify({"items": defaults.get(mode, defaults["breakdown"])})

@app.post('/remind_smart')
def remind_smart():
    body = request.get_json(silent=True) or {}
    task = body.get('task') or {}
    chat_id = str(body.get('chat_id','default'))
    when = task.get('when'); repeat = task.get('repeat','')
    if not when: return jsonify({"ok":False,"error":"no when"}), 400
    DATA["reminders"].append({"chat_id":chat_id, "title": task.get('title','–ö–≤–µ—Å—Ç'), "when": when, "repeat": repeat})
    return jsonify({"ok":True})

def loop():
    while True:
        try:
            now = datetime.now(timezone.utc).timestamp()
            keep=[]
            for r in DATA["reminders"]:
                try:
                    ts = datetime.fromisoformat(r["when"].replace('Z','+00:00')).timestamp()
                except Exception:
                    ts = None
                if ts and ts <= now:
                    kb = [[
                        {"text":"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ","callback_data":"done"},
                        {"text":"‚è≥ –û—Ç–ª–æ–∂–∏—Ç—å","callback_data":"snooze"},
                        {"text":"‚úñÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å","callback_data":"skip"},
                    ]]
                    try:
                        bot.send_message(int(r["chat_id"]), text=f"‚öîÔ∏è –ì–µ—Ä–æ–π, –ø–æ—Ä–∞: *{r['title']}*",
                                         reply_markup={"inline_keyboard": kb}, parse_mode=ParseMode.MARKDOWN)
                    except Exception: pass
                    if r.get('repeat') in ('DAILY','WEEKLY'):
                        try:
                            dt = datetime.fromisoformat(r['when'].replace('Z','+00:00'))
                            dt = dt + (timedelta(days=1) if r['repeat']=='DAILY' else timedelta(weeks=1))
                            r['when'] = dt.astimezone(timezone.utc).isoformat(); keep.append(r)
                        except Exception: pass
                else:
                    keep.append(r)
            DATA["reminders"]=keep
        except Exception: pass
        time.sleep(30)

async def start(update, _):
    button = InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å RPG Gamifier", web_app=WebAppInfo(url=MINIAPP_URL))
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–∏–ª—å–¥–∏—é! üêâ", reply_markup=InlineKeyboardMarkup([[button]]))

def main():
    app_ = ApplicationBuilder().token(TOKEN).build()
    app_.add_handler(CommandHandler('start', start))
    # start Flask + reminder loop
    threading.Thread(target=lambda: app.run(host="0.0.0.0", port=5000), daemon=True).start()
    threading.Thread(target=loop, daemon=True).start()
    app_.run_polling()

if __name__ == "__main__":
    main()
